(def empty? nil?)

(def defmacro
    (macro (symbol args body)
        (list def symbol (list macro args body))))

(defmacro defn (symbol args body)
    (list def symbol (list fn args body)))

(defmacro let (syms vals body)
    (cons (list fn syms body) vals))

(defn apply (func lst)
    (eval (cons func lst)))

(defn swap (lst)
    (cons (head (tail lst))
        (cons (head lst)
            (tail (tail lst)))))

; So we can write (cond ((...) (...) (else (...))))
(def else true)

(defmacro cond (conds) (begin
    (defn rec (conds)
        (if (empty? conds)
            nil
            (list if (head (head conds))
                (head (tail (head conds)))
                (rec (tail conds)))))
    (rec conds)))
